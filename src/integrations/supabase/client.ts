
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://ssrfjakurvpcshbesvyf.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNzcmZqYWt1cnZwY3NoYmVzdnlmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU5NDEzMTMsImV4cCI6MjA2MTUxNzMxM30.bIXSMU37FC_Q8xjYodSTARBF_izCeD9_HCk_Tgn-wNQ";

// Performance optimizations for the Supabase client
const clientOptions = {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storage: typeof window !== 'undefined' ? localStorage : undefined
  },
  global: {
    // Disable real-time subscriptions by default to reduce connection overhead
    realtime: false
  },
  // Add request timeout to prevent hanging requests
  db: {
    schema: 'public'
  }
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, clientOptions);

// Helper function to check if a Supabase response contains an error
export function hasError(response: any): boolean {
  return response && response.error !== undefined;
}

// Helper function to safely access data from a Supabase response
export function safeData<T>(response: any, defaultValue: T): T {
  if (hasError(response) || !response || response.data === undefined || response.data === null) {
    return defaultValue;
  }
  return response.data as T;
}

// Type guard to narrow down a response to data-only (no error)
export function isDataResponse<T>(response: any): response is { data: T; error: null } {
  return !hasError(response) && response?.data !== null && response?.data !== undefined;
}

// Helper to safely get a field from potential error responses
export function safeField<T, K extends keyof T>(obj: T | any, field: K, defaultValue: T[K]): T[K] {
  if (!obj || typeof obj !== 'object' || hasError(obj)) {
    return defaultValue;
  }
  return (obj as T)[field] !== undefined ? (obj as T)[field] : defaultValue;
}

// Helper to cast data safely to a specific type (useful for Supabase tables)
export function castData<T>(data: any): T {
  if (!data) return {} as T;
  return data as T;
}

// Get a record by ID from a specific table with proper typing
export function getById<T extends keyof Database['public']['Tables']>(
  table: T,
  id: string
) {
  return supabase
    .from(table)
    .select('*')
    .eq('id', id)
    .single();
}

// Improved filterByField function with proper type handling
export function filterByField<T extends keyof Database['public']['Tables']>(
  table: T,
  field: string,
  value: any
) {
  return supabase
    .from(table)
    .select('*')
    .eq(field, value);
}

// Safely cast ordered data to the expected type
export function castOrderedData<T>(data: any): T[] {
  if (!data || !Array.isArray(data)) return [] as T[];
  return data as T[];
}

// Type-safe insert function for Supabase tables with proper casting
export async function typeSafeInsert<T extends keyof Database['public']['Tables']>(
  table: T,
  data: Database['public']['Tables'][T]['Insert']
) {
  return await supabase.from(table).insert(data);
}

// Type-safe update function for Supabase tables with proper casting
export async function typeSafeUpdate<T extends keyof Database['public']['Tables']>(
  table: T,
  data: Database['public']['Tables'][T]['Update'],
  id: string
) {
  return await supabase.from(table).update(data).eq('id', id);
}

// Type-safe delete function for Supabase tables
export async function typeSafeDelete<T extends keyof Database['public']['Tables']>(
  table: T,
  id: string
) {
  return await supabase.from(table).delete().eq('id', id);
}

// Function to safely handle auth session checking
export async function checkAuthSession() {
  try {
    const { data: { session }, error } = await supabase.auth.getSession();
    if (error) throw error;
    return { session, error: null };
  } catch (error) {
    console.error('Erro ao verificar sessão de autenticação:', error);
    return { session: null, error };
  }
}

// Function to safely get user profile
export async function getUserProfile(userId: string) {
  try {
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .single();
    
    if (error) throw error;
    return { profile: data, error: null };
  } catch (error) {
    console.error('Erro ao obter perfil do usuário:', error);
    return { profile: null, error };
  }
}

// Function to safely sign in with email/password
export async function signInWithEmail(email: string, password: string) {
  try {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password
    });
    
    if (error) throw error;
    return { data, error: null };
  } catch (error) {
    console.error('Erro ao fazer login:', error);
    return { data: null, error };
  }
}

// Function to safely sign up with email/password
export async function signUpWithEmail(email: string, password: string, userData?: any) {
  try {
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: userData || {},
        emailRedirectTo: window.location.origin
      }
    });
    
    if (error) throw error;
    return { data, error: null };
  } catch (error) {
    console.error('Erro ao criar conta:', error);
    return { data: null, error };
  }
}

// Function to safely sign out
export async function signOut() {
  try {
    const { error } = await supabase.auth.signOut();
    if (error) throw error;
    return { error: null };
  } catch (error) {
    console.error('Erro ao fazer logout:', error);
    return { error };
  }
}

// Type-safe function for getting active services
export async function getActiveServices() {
  try {
    const { data, error } = await supabase
      .from('services')
      .select('*')
      .eq('active', true);

    if (error) throw error;
    return { services: data, error: null };
  } catch (error) {
    console.error('Erro ao buscar serviços ativos:', error);
    return { services: null, error };
  }
}

// Type-safe function for service operations
export async function serviceOperations() {
  return {
    // Get all services
    getAll: async () => {
      try {
        const { data, error } = await supabase
          .from('services')
          .select('*')
          .order('name');
          
        if (error) throw error;
        return { services: data, error: null };
      } catch (error) {
        console.error('Erro ao buscar serviços:', error);
        return { services: null, error };
      }
    },
    
    // Add new service
    add: async (serviceData: Database['public']['Tables']['services']['Insert']) => {
      try {
        const { data, error } = await supabase
          .from('services')
          .insert(serviceData)
          .select();
          
        if (error) throw error;
        return { service: data?.[0] || null, error: null };
      } catch (error) {
        console.error('Erro ao adicionar serviço:', error);
        return { service: null, error };
      }
    },
    
    // Update existing service
    update: async (id: string, serviceData: Database['public']['Tables']['services']['Update']) => {
      try {
        const { data, error } = await supabase
          .from('services')
          .update(serviceData)
          .eq('id', id)
          .select();
          
        if (error) throw error;
        return { service: data?.[0] || null, error: null };
      } catch (error) {
        console.error('Erro ao atualizar serviço:', error);
        return { service: null, error };
      }
    },
    
    // Delete service
    delete: async (id: string) => {
      try {
        const { error } = await supabase
          .from('services')
          .delete()
          .eq('id', id);
          
        if (error) throw error;
        return { error: null };
      } catch (error) {
        console.error('Erro ao excluir serviço:', error);
        return { error };
      }
    }
  };
}

// Type-safe functions for profile operations
export async function profileOperations() {
  return {
    // Get all profiles
    getAll: async () => {
      try {
        const { data, error } = await supabase
          .from('profiles')
          .select('*');
          
        if (error) throw error;
        return { profiles: data, error: null };
      } catch (error) {
        console.error('Erro ao buscar perfis:', error);
        return { profiles: null, error };
      }
    },
    
    // Update existing profile
    update: async (id: string, profileData: Database['public']['Tables']['profiles']['Update']) => {
      try {
        const { data, error } = await supabase
          .from('profiles')
          .update(profileData)
          .eq('id', id);
          
        if (error) throw error;
        return { error: null };
      } catch (error) {
        console.error('Erro ao atualizar perfil:', error);
        return { error };
      }
    }
  };
}
